
import { parse, parseFirst, Statement as Pstatement } from 'pgsql-ast-parser';
import { astVisitor } from 'pgsql-ast-parser';
import { Db } from '../dbclient';

const tables = new Set();
let joins = 0;
const visitor = astVisitor(map => ({

    // implement here AST parts you want to hook

    tableRef: t => tables.add(t.name),
    join: t => {
        joins++;
        // call the default implementation of 'join'
        // this will ensure that the subtree is also traversed.
        map.super().join(t);
    }
}))

// start traversing a statement
visitor.statement(parseFirst(`select * from ta left join tb on ta.id=tb.id`));



// this should be bundled separately? or just depend on tree shaking?
export class Compiler {
    constructor(public dbms: Db) {

    }
    async exec(sql: string): Promise<boolean> {
        const a = await this.prepare(sql)
        const tx = await this.dbms.begin()
        a.exec(tx)
        return tx.commit()
    }

    // we need an interface that we can return through the proxy

    async prepare<P, T>(sql: string): Promise<Statement<P, T>> {

        const ast: Pstatement[] = parse(`BEGIN TRANSACTION;
                                insert into my_table values (1, 'two')`)

        return new Statement<P, T>()
    }

}