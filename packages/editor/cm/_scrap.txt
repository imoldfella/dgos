
export function useCodeMirror(extensions: CmExtension[]) {
  const [element, setElement] = useState<HTMLElement>();

  const ref = useCallback((node: HTMLElement | null) => {
    if (!node) return;

    setElement(node);
  }, []);

  useEffect(() => {
    if (!element) return;

    const view = new CmEditorView({
      state: CmEditorState.create({
        extensions: [
           basicSetup,
           oneDark,
          javascript(),
          markdown(),
          drawSelection(),
          //syntaxHighlighting(defaultHighlightStyle),
          // ...extensions
        ]
      }),
      parent: element
    });

    return () => view?.destroy();
  }, [element]);

  return { ref };
}

type CodeMirrorProps = {
    extensions: CmExtension[];
  };
  
  export const CodeEditor = ({ extensions }: CodeMirrorProps) => {
    const { ref } = useCodeMirror(extensions);
  
    return <div ref={ref} />;
  };
  